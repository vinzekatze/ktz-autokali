description: |-
  Скрипт установки всего, что требуется для функционирования библиотеки

shell: bash

file_1:
  path: install/apt_installs.txt
  replacer: >-
    #apt_installs#
  description: список установок из apt

file_2:
  path: install/docker_images.txt
  replacer: >-
    #docker_installs#
  description: список docker-образов

file_3:
  path: install/python_installs.txt
  replacer: >-
    #python_installs#
  description: список python-пакетов (pip)

file_4:
  path: install/python_pipx_installs.txt
  replacer: >-
    #python_pipx_installs#
  description: список python-пакетов (pipx)

file_5:
  path: install/npm_installs.txt
  replacer: >-
    #nodejs_installs#
  description: список node.js-пакетов (npm)

file_6:
  path: install/recon-ng_cmd.txt
  replacer: >-
    #recon-ng_installs#
  description: команды для установки модулей recon-ng

file_8:
  path: .
  replacer: '#basic_path#'
  description: базовый путь файлов библиотеки



item_1: 
  description: apt update -y
  script: >-
    sudo apt update -y &&
    echo -e "\e[1;92m+++ APT REPOSITORIES UPDATED\e[0m" ||
    echo -e "\e[1;91m+++ APT REPOSITORIES NOT UPDATED\e[0m"

item_2:
  description: установка docker
  script: >-
    if sudo su - $USER -c 'docker run hello-world';
    then echo -e "\e[1;94m+++ DOCKER ALREADY INSTALLED\e[0m";
    else
    sudo apt install -y docker.io && (sudo systemctl enable docker --now && (docker --version && sudo usermod -aG docker $USER));
    sudo su - $USER -c 'docker run hello-world' && 
    echo -e "\e[1;92m+++ DOCKER SUCCESSFULLY INSTALLED\e[0m" ||
    echo -e "\e[1;91m+++ DOCKER INSTALLATION ERROR\e[0m";
    fi

item_3:
  description: загрузка docker-образов
  script: >-
    if sudo su - $USER -c 'docker run hello-world'; then
    for image in $(cat "#docker_installs#");
    do sudo su - $USER -c "docker image inspect $image &> /dev/null && docker image rm $image";
    sudo su - $USER -c "docker pull $image" &&
    echo -e "\e[1;92m+++ [DOCKER] SUCCESSFULLY INSTALLED: $image\e[0m" ||
    echo -e "\e[1;91m+++ [DOCKER] INSTALLATION ERROR: $image\e[0m";
    done;
    else echo -e "\e[1;91m+++ DOCKER NOT INSTALLED\e[0m"; fi

item_4:
  description: установка тулзов с помощью apt
  script: >-
    for tool in $(cat "#apt_installs#");
    do sudo apt install -y $tool &&
    echo -e "\e[1;92m+++ [APT] SUCCESSFULLY INSTALLED: $tool\e[0m" ||
    echo -e "\e[1;91m+++ [APT] INSTALLATION ERROR: $tool\e[0m";
    done; sudo apt autoremove -y

item_5:
  description: установка python-пакетов (PIP)
  script: >-
    for py_pack in $(cat "#python_installs#"); do
    pip install --upgrade $py_pack ||
    sudo apt install python3 $py_pack ||
    pip install --upgrade --break-system-packages $py_pack &&
    echo -e "\e[1;92m+++ [PIP] SUCCESSFULLY INSTALLED: $py_pack\e[0m" ||
    echo -e "\e[1;91m+++ [PIP] INSTALLATION ERROR: $py_pack\e[0m";
    done

item_6:
  description: установка python-пакетов (PIPX)
  script: >-
    sudo pipx ensurepath --global || { pipx ensurepath; sudo pipx ensurepath; };
    for py_pack in $(cat "#python_pipx_installs#"); do
    sudo pipx upgrade $py_pack --global || 
    { pipx upgrade $py_pack; sudo pipx upgrade $py_pack; } &&
    echo -e "\e[1;92m+++ [PIPX] SUCCESSFULLY INSTALLED: $py_pack\e[0m" ||
    echo -e "\e[1;91m+++ [PIPX] INSTALLATION ERROR: $py_pack\e[0m";
    done

item_7:
  description: установка node.js-пакетов (NPM)
  script: >-
    for npm_pack in $(cat "#nodejs_installs#"); do
    sudo npm install -g $npm_pack &&
    echo -e "\e[1;92m+++ [NPM] SUCCESSFULLY INSTALLED: $npm_pack\e[0m" ||
    echo -e "\e[1;91m+++ [NPM] INSTALLATION ERROR: $npm_pack\e[0m";
    done

item_8:
  description: скриптовые установки
  script: |-
    recon-ng -r #recon-ng_installs#
    echo -e "\e[1;94m+++ RECON-NG MODULES UPDATE COMPLETE\e[0m"
    
    cd #basic_path#
    mkdir -p ./thirdparty

    cd #basic_path#
    cd ./thirdparty
    gitrepo='https://github.com/Josue87/gotator'
    image=$(basename $gitrepo)
    git clone $gitrepo || { echo 'Pulling existing repo...'; cd ./$image; git pull; cd ..; }
    cd ./$image; curdir=$(pwd)
    git config --global --add safe.directory $(pwd)
    sudo su - $USER -c "docker image inspect $image &> /dev/null && docker image rm $image"
    sudo su - $USER -c "cd $curdir; docker build . -t $image"
    sudo su - $USER -c "docker image inspect $image &> /dev/null" && echo -e "\e[1;92m+++ [SCRIPT] SUCCESSFULLY INSTALLED: $image\e[0m" || echo -e "\e[1;91m+++ [SCRIPT] INSTALLATION ERROR: $image\e[0m";

    cd #basic_path#
    cd ./thirdparty
    gitrepo='https://github.com/k1rurk/check_bitrix'
    image=$(basename $gitrepo)
    git clone $gitrepo || { echo 'Pulling existing repo...'; cd ./$image; git pull; cd ..; }
    cd ./$image; curdir=$(pwd)
    git config --global --add safe.directory $(pwd)
    wget https://raw.githubusercontent.com/artyuum/simple-php-web-shell/master/index.php
    mv ./index.php ./shell.html
    echo -e 'FROM python:3\nWORKDIR /usr/src/app\nCOPY . .\nRUN pip install --no-cache-dir -r requirements.txt\nENTRYPOINT [ "python", "./test_bitrix.py" ]' > Dockerfile
    sudo su - $USER -c "docker image inspect $image &> /dev/null && docker image rm $image"
    sudo su - $USER -c "cd $curdir; docker build . -t $image"
    sudo su - $USER -c "docker image inspect $image &> /dev/null" && echo -e "\e[1;92m+++ [SCRIPT] SUCCESSFULLY INSTALLED: $image\e[0m" || echo -e "\e[1;91m+++ [SCRIPT] INSTALLATION ERROR: $image\e[0m";

item_9:
  description: автонастройка bashmator
  script: |-
    bshm shell add /usr/bin/bash
    bshm shell add /usr/bin/python3
    bshm shell add /usr/bin/node --popen-args '["-e"]'
    bshm shell add /usr/bin/msfconsole --name msfconsole --popen-args '["-q", "-x"]'
    bshm library scan -f
