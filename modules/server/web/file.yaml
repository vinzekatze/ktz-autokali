description: |-
  Node.js сервер, отдающий файлы их именам.
  
  Если файл не обнаружен, отправляет пользователю редирект на заданный URL.

author: vinzekatze
tags:
  - node.js
  - html
  - server

arguments:
  port:
    default:
    description: порт сервера
    replacer: '#port#'
    regex: '^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'
  i:
    default: '0.0.0.0'
    description: IP старта сервера
    replacer: '#ip#'
    metavar: IP
    regex: '^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$'
  r:
    default: 'https://yandex.ru'
    description: URL сайта для редиректа
    replacer: '#redirect#'
    metavar: URL
  f:
    default: websrc
    description: путь до папки, где содержатся файлы (осторожно! работает рекурсивно!)
    replacer: '#Folder#'
    metavar: FOLDER

  ssl:
    default:
      - |-
        const proto = 'http';
        const server = http.createServer(logic);
      - |-
        const proto = 'https';
        const options = {
          key: fs.readFileSync(#key#),
          cert: fs.readFileSync(#cert#),
        };
        const server = https.createServer(options, logic);
    replacer: '#sslornot#'
    description: использовать ssl
  
  cert:
    default: server.cert
    description: путь до сертификата .cert
    metavar: 'FILE'
    replacer: '#cert#'
  
  key:
    default: server.key
    description: путь до приватного ключа .key
    metavar: 'FILE'
    replacer: '#key#'
  
  log:
    default:
      -
      - |-
        var data = {from_ip: req.socket.remoteAddress,
                    url: req.url,
                    date: Date(),
                    headers: req.headers,
                    body: req.body};
          console.log(data);
          console.log();
    description: показывать полный лог
    replacer: '#logging#'  

mode:
  format:
    i: '{0!r}'
    r: '{0!r}'
    f: '{0!r}'
    cert: '{0!r}'
    key: '{0!r}'

shell: node
script: |-
  const http = require('http');
  const https = require('https');
  const fs = require('fs');
  const path = require('path');
  const mime = require('mime');
  const hostname = #ip#;
  const port = #port#;
  const redirect = #redirect#;
  const Folder = #Folder#;

  function logic (req, res) {
    if (allfiles.includes(req.url)) {
      res.writeHeader(200, {"Content-Type": mime.getType(req.url) + "; charset=UTF-8", 
                            "Access-Control-Allow-Origin": "*"});
      res.write(fs.readFileSync(path.join(Folder, req.url), 'utf8'));
      res.end();
      console.log(`File ${req.url} was sent to ${req.socket.remoteAddress}`)
    } else {
      res.writeHeader(302, { 'Location': redirect + req.url});
      res.end();
    };
    #logging#
  };
  
  async function readSrc (src) {
    let outlist = [];
    const alltree = await fs.promises.readdir(src, { recursive: true });
    await alltree.forEach(file => {
      if (fs.lstatSync(path.join(src, file)).isFile()) {
        outlist.push( '/' + file)
      };
    });
    return await outlist;
  };

  var allfiles = [];
  readSrc(Folder).then((result) => {
    allfiles = result;
    console.log('Files:');
    console.log(allfiles);
  });

  #sslornot#
  server.listen(port, hostname, () => {
    console.log(`Server running at ${proto}://${hostname}:${port}/`);
    console.log(`Redirect URL: ${redirect}`);
    console.log();
  })