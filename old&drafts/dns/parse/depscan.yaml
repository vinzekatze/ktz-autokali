description: |-
    Парсит json-ы тулзы depscan и преобразует в csv
    ---
    Формула для Excel-сортировки в непредвиденных ситуациях:
    =(ЕСЛИ(ЕОШИБКА(ПОИСК("Критический"; F1; 1));0;10000) + ЕСЛИ(ЕОШИБКА(ПОИСК("Высокий"; F1; 1));0;1000) + ЕСЛИ(ЕОШИБКА(ПОИСК("Средний"; F1; 1));0;100) + ЕСЛИ(ЕОШИБКА(ПОИСК("Низкий"; F1; 1));0;10))/ЕСЛИ(ЕОШИБКА(ПОИСК("-"; F1; 1));1;2)
author: vinzekatze
tags:
  - code
  - parser
  - depscan
install: |-
  pip3 install packaging
arguments:
  files:
    default:
    replacer: __FILES_PATHS__
    description: путь до json файла/файлов depscan
shell: python3
script: |-
    import json
    from glob import glob
    from shlex import split as sh_split
    from packaging.version import parse as pack_parse
    from pathlib import Path

    trans_table = str.maketrans({'>': None, '<': None, '=': None})

    def version_parser(versions):
        ver_dict = {}
        for version in versions:
            for ver in version.split('-'):
                ver_dict.update({pack_parse(ver.translate(trans_table)): ver.translate(trans_table)})
        min_ver = ver_dict.get(min(ver_dict.keys()))
        max_ver = ver_dict.get(max(ver_dict.keys()))
        string_ver = f'{min_ver}-{max_ver}' if min_ver != max_ver else min_ver 
        return string_ver

    def severity_parser(severities):
        severity_list = {}
        for severity in severities:
            if severity.lower() == 'critical':
                severity_list.update({4: 'Критический'})
            if severity.lower() == 'high':
                severity_list.update({3: 'Высокий'}) 
            if severity.lower() == 'medium':
                severity_list.update({2: 'Средний'}) 
            if severity.lower() == 'low':
                severity_list.update({1: 'Низкий'})
        min_sev = severity_list.get(min(severity_list.keys()),'')
        max_sev = severity_list.get(max(severity_list.keys()),'')
        string_ver = f'{min_sev}-{max_sev}' if min_sev != max_sev else min_sev 
        return string_ver

    def cvss_parser(cvss):
        min_cvss = min(cvss)
        max_cvss = max(cvss)
        string_cvss = f'CVSSv3:{min_cvss}-{max_cvss}' if min_cvss != max_cvss else f'CVSSv3:{min_cvss}'
        return string_cvss

    input_list='''
        __FILES_PATHS__
        '''

    files = []
    for file in sh_split(input_list, comments=False, posix=True):
        files.extend(glob(file))

    data_dict = {}
    for file in files:
        with open(file, 'r') as f:
            data = ', '.join(line.strip() for line in f)
            data_dict.update({Path(file).stem: json.loads(f'[{data}]')})

    fin_json = {}
    for key in data_dict:
        for line in data_dict[key]:
            fin_json.update({line['package']: {"id" : [], "version": [], "fix_version": [], "severity": [], "cvss_score": [], "files": [] }})

    for key in data_dict:
        for line in data_dict[key]:
            if line['id'] not in fin_json[line['package']]["id"]:
                fin_json[line['package']]["id"].append(line['id'])
            if line['version'] not in fin_json[line['package']]["version"]:
                fin_json[line['package']]["version"].append(line['version'])
            if line['fix_version'] not in fin_json[line['package']]["fix_version"]:
                fin_json[line['package']]["fix_version"].append(line['fix_version'])
            if line['severity'] not in fin_json[line['package']]["severity"]:
                fin_json[line['package']]["severity"].append(line['severity'])
            if line['cvss_score'] not in fin_json[line['package']]["cvss_score"]:
                fin_json[line['package']]["cvss_score"].append(line['cvss_score'])
            if key not in fin_json[line['package']]["files"]:
                fin_json[line['package']]["files"].append(key)

    fin_json = {k: v for k, v in sorted(fin_json.items(), key=lambda item: max(item[1]['cvss_score']), reverse=True)}

    fin_csv = [['Имя пакета', 'Модули', 'Версия', 'CVE ID / NPM ID', 'Уровень опасности', 'Оценка уровня опасности']]
    for package in fin_json:
        fin_csv.append([package,
        ', '.join(fin_json[package].get('files', '')),
        version_parser(fin_json[package].get('version')),
        ', '.join(fin_json[package].get('id', '')),
        severity_parser(fin_json[package].get('severity')),
        cvss_parser(fin_json[package].get('cvss_score'))
        ])

    for line in fin_csv:
        data = [f'"{i}"' for i in line]
        print(';'.join(data))