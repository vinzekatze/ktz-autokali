description: >-
  Определяет сетевые диапазоны, к которым относятся заданные IP-адреса
author: vinzekatze
tags:
  - ip
  - whois
  - cidr
  - nets

arguments:
  i:
    default:
      -
    metavar: IP
    multiple: true
    description: IP адреса для запроса
    regex: ([a-z0-9]{0,4}\:([a-z0-9]{0,4}\:)*\:[a-z0-9]{0,4})|(([0-9]{1,3}\.)+[0-9]{1,3})
  f:
    metavar: FILE
    multiple: true
    default:
      -
    description: читать IP-адреса из файлов
    regex: ([a-z0-9]{0,4}\:([a-z0-9]{0,4}\:)*\:[a-z0-9]{0,4})|(([0-9]{1,3}\.)+[0-9]{1,3})
  q:
    default:
      - 'True'
      - 'False'
    description: выводить только уникальные CIDR
  d:
    metavar: DELIM
    default:
      -
    description: задать разделитель для 3-его режима вывода
mode:
  format:
    i: '{!r}'
    f: '{!r}'
    d: >-
      , end={!r}
  join:
    i: ', '
    f: ', '
  readfile:
    - f

shell: python3
script: |-
  import ipwhois
  from tabulate import tabulate
  cl_targs = [#i#]
  file_targs = [#f#]
  targs = cl_targs + file_targs
  cidrs_uniq = []
  for i in targs:
      try:
          obj = ipwhois.IPWhois(i)
          result = obj.lookup_whois()
          headers = [f'ASN{result.get("asn", "-")}', result.get("asn_cidr", "-"), result.get("asn_description", "-")]
          nets = []
          for j in result.get("nets", []):
            nets.append([j.get("name", "-"), j.get("cidr", "-"), j.get("description", "-")])
          if #q#:
            print(f'+ IP: {i}');
            print(tabulate(nets, headers, tablefmt="psql", maxcolwidths=[None, 43]));
            print()
          else:
            if headers[1] not in cidrs_uniq:
                cidrs_uniq.append(headers[1])
                print(headers[1]#d#)
            for k in nets:
                if k[1] not in cidrs_uniq:
                    cidrs_uniq.append(k[1])
                    print(k[1]#d#)
      except:
          pass